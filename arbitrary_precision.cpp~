#include "header/arbitrary_precision.h"
#include <iostream>
using namespace std;

apint::apint(){
	data = new unsigned int[1];
	data[0] = 0;
	length=1; //treated as zero
}
apint::apint(unsigned int x){	
	data= new unsigned int[1];
	*data=x;
	length=1;
}

apint::apint(const apint &obj){
	data= new unsigned int[obj.length];
	length=obj.length;
	for(int i=0;i<length;i++){
		data[i]=obj.data[i];
	}
}

apint::apint(unsigned int* buf, int len){
	for(int i=0;i<length;i++){
		data[i]=buf[i];
	}
}

void apint::remove_prefix(){
	if (length == 1)return;

	if (data[0] == 0){
		for (int i = 0; i < length-1; i++){
			data[i] = data[i + 1];
		}
		length--;
		remove_prefix();
	}
}

apint apint::operator+(const apint& right) const{

	if(this->length < right.length)return right+*this;

	apint result;

	int i;
	unsigned int carry=0;
	unsigned int temp;
	unsigned int op1,op2;
	bool eor=0;//end of right

	result.data=new unsigned int[length+1];
	result.length=length+1;

	for(i=1;i<=length;i++){
		if(i>right.length)
			eor=1;
		
		op1=(eor)?0:low(right.data[right.length-i]);
		op2=low(data[length-i]);

		temp=op1+op2+carry;

		result.data[result.length-i]= ((to_high(temp))>>16);
		carry=temp>>16;

		

		op1=(eor)?0:high(right.data[right.length-i]);
		op2=high(data[length-i]);

		temp=op1+op2+carry;

		result.data[result.length-i]+=(to_high(temp));
		carry=temp>>16;
	}

	result.data[0]=carry;
	result.remove_prefix();

	return result;
}

apint apint::operator*(const apint& right) const{
	apint res;

	res.length = length + right.length;
	res.data = new unsigned int[res.length];

	int i;
	int j;
	int index;
	int x0, x1, y0, y1;
	
	unsigned int carry = 0;
	unsigned int temp = 0;

	for (i = 1; i <= res.length; i++){

		temp = carry;
		carry = 0;

		for (j = 0; j < length; j++){
			index = i + 1 - (length - j);
			if (index < 1)continue;                //too high
			if (index > right.length)break;        //too low

			x1 = high(data[j]);
			x0 = low(data[j]);

			y1 = high(right.data[right.length - index]);
			y0 = low(right.data[right.length - index]);

			//karatsuba
			carry += x1*y1;
			carry += (to_low(x1*y0 + x0*y1 + (to_low(x0*y0))));

			temp += x0*y0;
			temp += to_high(x1*y0 + x0*y1);
		}

		res.data[res.length - i] = temp;
	}

	res.remove_prefix();
	return res;	
}

bool apint::operator>=(const apint& right) const{
	if (length > right.length)return 1;
	else if (length < right.length)return 0;

	for (int i = 0; i < length; i++){
		if (data[i]>right.data[i])return 1;
		else if (data[i] < right.data[i])return 0;
	}
	return 1;
}

bool apint::operator==(const apint& right) const{
	if (length != right.length)return 0;

	for (int i = 0; i < length; i++){
		if (data[i] != right.data[i])return 0;
	}
	return 1;
}

bool apint::operator!=(const apint& right) const{
	return !((*this) == right);
}

apint apint::operator-(const apint& right){
	apint res;
	res.length = length;
	res.data = new unsigned int[length];

	int i;
	unsigned int carry = 0;
	unsigned int op1, op2;
	bool eor = 0;//end of right

	for (i = 1; i <= length; i++){
		if (i > right.length)eor = 1;

		op1 = low(data[length - i]);
		op2 = eor ? 0 : low(right.data[right.length - i]);

		if (op1 >= op2 + carry){
			res.data[length - i] = op1 - op2 - carry;
			carry = 0;
		}
		else{
			res.data[length - i] = (1 << 16) + op1 - op2 - carry;
			carry = 1;
		}

		op1 = high(data[length - i]);
		op2 = eor ? 0 : high(right.data[right.length - i]);

		if (op1 >= op2 + carry){
			res.data[length - i] += (to_high(op1 - op2 - carry));
			carry = 0;
		}
		else{
			res.data[length - i] += (to_high((1 << 16) + op1 - op2 - carry));
			carry = 1;
		}

	}

	res.remove_prefix();
	return res;
}

int apint::bits() const{
	int temp = data[0];
	int counter = 0;

	while (temp){
		counter++;
		temp = temp >> 1 & 0x7fffffff;
	}
	return counter + (length - 1) * 32;
}
apint apint::operator>>(const int& n) const{
	apint res=apint(0);
	int l=bits();
	//cout<<"l:"<<l<<" n:"<<n<<endl;
	for(int i=1;i<=l-n;i++){
		//cout<<"copying bit No."<<i<<endl;
		res=res<<1;
		//cout<<"copying bit No."<<i<<endl;
		if(checkbit(i))
			res.data[res.length-1]|=1;
	}
	return res;
}

apint apint::operator<<(const int& n) const{
	if(zero())return *this;

	apint res;

	int NoB = bits();//number of bits

	res.length = (NoB + n) / 32 + 1;
	res.data = new unsigned int[res.length];

	int leading = 32-((NoB + n) % 32); //leading zeros
	leading = leading % 32;

	bool eoi = 0;//end of input
	int temp;

	int i, j,index;
	for (i = 0; i < res.length; i++){
		temp = 0;

		if (!eoi)
			for (j = 0; j < 32; j++){
			
				index = i * 32 + j + 1 - leading; //the index'th bit of input

				if (index < 1)continue;
				if (index> NoB){
					eoi = 1;
				}

				temp = (temp << 1);
			
				if (!eoi)
					if (data[(index + 32 - NoB % 32 - 1) / 32] & (1 << ( (32 - ((index + 32 - NoB % 32) % 32))%32 )))
						temp++;
		}

		res.data[i] = temp;
	}
	res.remove_prefix();

	
	return res;
}

bool apint::checkbit(int pos) const{//content of the pos'th bit
	int leading = 32 - this->bits() % 32;
	leading = leading % 32;

	return data[(pos + leading - 1) / 32] & (1 << ( (32-(pos+leading)%32)%32) );
}

apint apint::div(const apint& right, apint &rem){
	apint op1(*this);
	apint res(0);
	apint one(1);
	apint temp;
	int diff;
	//		cout<<right.data[right.length-1]<<endl;
	while (op1 >= right){
		diff = op1.bits() - right.bits();

		if (diff > 1){
			temp=(right << (diff - 1));
			op1 = op1 - temp;

			temp=(one << (diff - 1));
			res = res + temp;
		}
		else{
			op1 = op1 - right;
			res = res + one;
		}
	}

	rem = op1;
	return res;
}

modulo_arithmic::modulo_arithmic(unsigned int x){
	p = apint(x);
}
modulo_arithmic::modulo_arithmic(apint &x){
	p = x;
}

void modulo_arithmic::reduce(apint &x){
	apint temp;

	if (x >= p){

		int diff = x.bits() - p.bits();
		if (diff > 1){
			temp=(p << diff - 1);
			x = x - temp;
			reduce(x);
		}
		else{
			x = x - p;
			reduce(x);
		}
	}		
}

apint modulo_arithmic::add(const apint &a, const apint &b){
	apint res = a + b;
	reduce(res);

	return res;
}
apint modulo_arithmic::neg(const apint &x){
	
	apint res = x;
	reduce(res);
	res = p - res;

	reduce(res);

	return res;
}

apint modulo_arithmic::sub(const apint &a,const apint &b){
	apint temp = neg(b);

	return add(a, temp);
}

apint modulo_arithmic::mul(const apint &a, const apint &b){
	apint res = a*b;
	reduce(res);

	return res;
}

apint modulo_arithmic::pow(const apint &x, const apint &n){
	apint res(1);

	for (int i = 1; i <= n.bits(); i++){
		res = res*res;
		reduce(res);

		if (n.checkbit(i)){
			res = res*x;
			reduce(res);
		}
	}

	return res;
}

apint modulo_arithmic::inv(const apint &a){

	//Extended euclidean

	apint pp(1), q, p1(1), p2(0), q1, q2,rem,temp;
	apint op1(a), op2(p);
	int i;

	for (i = 0;;i++){

		if (i >= 3){
			p2 = p1;
			p1 = pp;
			q2 = q1;
			q1 = q;
		}


		if (op1 >= op2){
			q = op1.div(op2, rem);
			op1 = rem;
		}
		else{
			q = op2.div(op1, rem);
			op2 = rem;
		}

		if (i == 0){
			q2 = q;
		}
		else if (i == 1){
			q1 = q;		
		}
		else{
			temp=p1*q2;
			pp = sub(p2, temp);
		}

		if (rem.zero())break;
	}

	if (i == 1){
		return neg(q2);
	}

	temp=pp*q1;
	return sub(p1, temp);

}
apint modulo_arithmic::div(const apint &a, const apint &b){
	apint temp = inv(b);
	return mul(a, temp);
}
