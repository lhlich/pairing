#include "header/pairing.h"
#include <iostream>
#define HEXMODE 0
using namespace std;
ostream& operator<<(ostream& os, const apint & obj);

point g0;
void load_g0();

void makepoint(point &P, apint &a,apint &b){

	if(!LIGHT){
		P=P.x.a*g0;
		return;

	}
	
	apint sq=getQ().p+apint(1);	
	//cout<<sq<<","<<(sq>>2);
	//cout<<sq<<endl;
	cout<<"making point...";	
	
	P.y = P.x.pow(apint(3)) + P.x;
	P.y = P.y.pow(sq>>2);

	complex one(apint(1), apint(0), 1);

	if (!P.on_curve()){
		cout<<"failed :/"<<endl;
		P.x = P.x*complex(b,apint(0),1);
		P.x = P.x+complex(a,apint(0),1);
		makepoint(P,a,b);
	}	

}

ostream& operator<<(ostream& os, const apint & obj)
{
	if (HEXMODE)os << "0x";
	for (int i = 0; i<obj.length; i++){
		if (HEXMODE)os << hex;
		os << obj.data[i];
		if (i != obj.length - 1)
			os << ' ';
	}
	return os;
}

ostream& operator<<(ostream& os, const complex& obj)
{
	os << obj.a;

	if (obj.ext && !(obj.b.zero()))
		os << '+' << obj.b << 'i';

	return os;
}

ostream& operator<<(ostream& os, const point & obj)
{
	if (obj.id){
		os << "O";
		return os;
	}
	os << '[' << obj.x << ',' << obj.y << ']';

	return os;
}
void test_apint();
void test_ecc();
void test_pairing();
int main(){
	
	load_g0();
	apint mod=getQ().p;
	apint three(3);

	int n=mod.bits();
	cout<<"current modulo:"<<mod<<endl;
	apint rem;

//	mod.div(three,rem);

	cout<<"q mod 4:"<<(2*mod.checkbit(n-1)+mod.checkbit(n))<<endl;
//	cout<<"q mod 3:"<<rem<<endl;


	test_apint();
	test_ecc();
	test_pairing();


	return 0;
}


void test_apint(){
	apint x(234567890);
	apint y(456789012);

	modulo_arithmic P(123121);

	P.reduce(x);
	//P.reduce(y);

	cout << "---------apint test-----------" << endl;
	cout << "x=" << x << endl;
	cout << "y=" << y << endl;

	apint r = x + y;
	cout << "x+y=" << r << endl;

	r = x*y;
	cout << "x*y=" << r << endl;

	apint s = y*y;

	cout << "y^2-x*y=" << s - r << endl;
	cout << "(y-x)*y=" << (y - x)*y << endl;
	cout << "y<<56=" << (y << 56) << endl;
	
}

void test_ecc(){
	
	pairing E;
	cout << "----------ECC test------------" << endl;
	complex x(apint(25), apint(0), 1);
	complex y(apint(30), apint(0), 1);

	point P(x, y);
	makepoint(P,E.r,E.h);


	point Q(y, y);
	makepoint(Q,E.r,E.h);

	bool t = P.on_curve();
	t = Q.on_curve();


	cout << "P:" << P << endl;
	cout << "Q:" << Q << endl;
	cout << "-Q:" << Q.inv() << endl;
	cout << "P+Q:" << P + Q << endl;
	cout << "P-Q:" << P - Q << endl;
	cout << "P+(-Q):" << P + Q.inv() << endl;
	cout << "[2]P:" << (2 * P) << endl;
	cout << "[4]P:" << (4 * P) << endl;
	cout << "(P+Q)+(P-Q):" << (P + Q) + (P - Q) << endl;
	cout << "[3]P+[4]P:" << (3*P)+(4*P) << endl;
	cout << "[7]P:" << (7 * P) << endl;

	cout << "------------------------------" << endl;

}
void test_pairing(){
	pairing E;
	point P;

	P.x = complex(apint(30), apint(0), 1);
	makepoint(P,E.r,E.h);

	P = E.h * P;

	complex one(apint(1), apint(0), 1);


	while (!P.on_curve()){

		P.x = P.x + one;
		makepoint(P,E.r,E.h);
		P = E.h * P;
	}

	point Q(2, 2);
	makepoint(Q,E.r,E.h);
	Q=E.h*Q;
	while (!Q.on_curve()){

		Q.x = Q.x + one;
		makepoint(Q,E.r,E.h);
		Q = E.h * Q;
	}


	P.on_curve();
	Q.on_curve();


	complex res = E.bi(P, Q);

	cout << "----------pairing test------------" << endl;
	cout << "P:" << P << endl;
	cout << "Q:" << Q << endl;
	cout << "e(P,Q):" << res << endl;
	cout << "e(P,Q)^3:" << res*res*res << endl;
	cout << "[3]P:" << (3 * P) << endl;
	cout << "e([3]P,Q):" << E.bi(3 * P, Q) << endl;
	cout << "------------------------------" << endl;

	cout<<"system parameter"<<endl;
	cout<<"q:"<<getQ().p<<endl;
	cout<<"r:"<<E.r<<endl;
	cout<<"h:"<<E.h<<endl;

/*	point M(25,30);
	point N(34,0);
	N.y.b=apint(30);*/

/*
	cout << "M:" << M << endl;
	cout << "N:" << N << endl;
	cout << "tr(M,N):" << E.tr(M,N) << endl;
	cout<<"Reduced:"<<E.tr(M,N).pow(E.qk1r)<<endl;
*/

}

void load_g0(){
	if(LIGHT) return;

//153bit xval
	const char *xval="666285918909156579706577334448298316724907370077532163720911308141035224473899144233063713796722357570360597511749588023079703454150583408697678496165580";
//154bit yval

	const char* yval="8170329682717850087747595207221033944095934190074401412696905443236301073028440609121153197353941845696205713082179610663617373612405424702056538740290597";
	
	apint x=apint(0);
	apint y=apint(0);

	apint ten(10);
	int i;
	
	cout<<"loading x for g0: ";
	for(i=0;i<153;i++){
		x=x*ten;
		x=x+apint(xval[i]-'0');
		cout<<xval[i];
	}
	cout<<endl;

	cout<<"loading y for g0: ";
	for(i=0;i<154;i++){
		y=y*ten;
		y=y+apint(yval[i]-'0');
		cout<<yval[i];
	}
cout<<endl;
	g0.x=complex(x,apint(0),1);
	g0.y=complex(y,apint(0),1);

	if(!g0.on_curve())
		cout<<"WTF!"<<endl;
	
}
